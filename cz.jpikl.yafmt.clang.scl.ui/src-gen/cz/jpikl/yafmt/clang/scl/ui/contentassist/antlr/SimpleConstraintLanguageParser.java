/*
* generated by Xtext
*/
package cz.jpikl.yafmt.clang.scl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import cz.jpikl.yafmt.clang.scl.services.SimpleConstraintLanguageGrammarAccess;

public class SimpleConstraintLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private SimpleConstraintLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected cz.jpikl.yafmt.clang.scl.ui.contentassist.antlr.internal.InternalSimpleConstraintLanguageParser createParser() {
		cz.jpikl.yafmt.clang.scl.ui.contentassist.antlr.internal.InternalSimpleConstraintLanguageParser result = new cz.jpikl.yafmt.clang.scl.ui.contentassist.antlr.internal.InternalSimpleConstraintLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getContextualExpressionAccess().getAlternatives(), "rule__ContextualExpression__Alternatives");
					put(grammarAccess.getNegationAccess().getAlternatives(), "rule__Negation__Alternatives");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getContextualExpressionAccess().getGroup_0(), "rule__ContextualExpression__Group_0__0");
					put(grammarAccess.getImplicationAccess().getGroup(), "rule__Implication__Group__0");
					put(grammarAccess.getImplicationAccess().getGroup_1(), "rule__Implication__Group_1__0");
					put(grammarAccess.getDisjunctionAccess().getGroup(), "rule__Disjunction__Group__0");
					put(grammarAccess.getDisjunctionAccess().getGroup_1(), "rule__Disjunction__Group_1__0");
					put(grammarAccess.getExclusiveDisjunctionAccess().getGroup(), "rule__ExclusiveDisjunction__Group__0");
					put(grammarAccess.getExclusiveDisjunctionAccess().getGroup_1(), "rule__ExclusiveDisjunction__Group_1__0");
					put(grammarAccess.getConjunctionAccess().getGroup(), "rule__Conjunction__Group__0");
					put(grammarAccess.getConjunctionAccess().getGroup_1(), "rule__Conjunction__Group_1__0");
					put(grammarAccess.getNegationAccess().getGroup_1(), "rule__Negation__Group_1__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_0(), "rule__PrimaryExpression__Group_0__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_1(), "rule__PrimaryExpression__Group_1__0");
					put(grammarAccess.getContextualExpressionAccess().getContextIdAssignment_0_2(), "rule__ContextualExpression__ContextIdAssignment_0_2");
					put(grammarAccess.getContextualExpressionAccess().getExpressionAssignment_0_4(), "rule__ContextualExpression__ExpressionAssignment_0_4");
					put(grammarAccess.getImplicationAccess().getRightPartAssignment_1_2(), "rule__Implication__RightPartAssignment_1_2");
					put(grammarAccess.getDisjunctionAccess().getPartsAssignment_1_2(), "rule__Disjunction__PartsAssignment_1_2");
					put(grammarAccess.getExclusiveDisjunctionAccess().getPartsAssignment_1_2(), "rule__ExclusiveDisjunction__PartsAssignment_1_2");
					put(grammarAccess.getConjunctionAccess().getPartsAssignment_1_2(), "rule__Conjunction__PartsAssignment_1_2");
					put(grammarAccess.getNegationAccess().getExpressionAssignment_1_2(), "rule__Negation__ExpressionAssignment_1_2");
					put(grammarAccess.getPrimaryExpressionAccess().getFeatureIdAssignment_0_1(), "rule__PrimaryExpression__FeatureIdAssignment_0_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			cz.jpikl.yafmt.clang.scl.ui.contentassist.antlr.internal.InternalSimpleConstraintLanguageParser typedParser = (cz.jpikl.yafmt.clang.scl.ui.contentassist.antlr.internal.InternalSimpleConstraintLanguageParser) parser;
			typedParser.entryRuleExpression();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SimpleConstraintLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SimpleConstraintLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
